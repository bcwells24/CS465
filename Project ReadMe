  In a full stack web application, different frontend approaches like Express HTML templates, JavaScript, and Single-Page Applications (SPAs) offer varying benefits. Express HTML provides server-side rendering for faster initial loads, JavaScript enhances interactivity, and SPAs offer smooth, app-like experiences. The backend used MongoDB, a NoSQL database, for its flexibility, scalability, and compatibility with JavaScript-based applications. JSON, a language-independent data format, differs from JavaScript (a programming language) and serves as a bridge between frontend and backend. Code refactoring, such as creating reusable UI components, improves efficiency and maintainability.

  API testing in a full stack application involves various methods like unit, integration, and functional testing to verify endpoints' functionality and reliability. Security is always an important aspect, encompassing authentication, authorization, input validation, and encryption. Testing these security measures requires penetration testing and thorough code review. Understanding the interplay between methods, endpoints, and security is essential for developing secure full stack applications.

  During this course, I have designed the architecture of a web application, built the application using frameworks, and integrated a database. These competencies have built my understanding of computer science and the full-stack web application process. I still am by no means an expert but have a point of reference to continue to learn from. 
